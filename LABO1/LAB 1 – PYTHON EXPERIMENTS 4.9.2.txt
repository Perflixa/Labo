LAB 1 – PYTHON EXPERIMENTS 4.9.2
1.1 Install different tools/packages on Ubuntu DEVASC-LABVM:
 
-Python 3.8 and PIP
-Visual Studio Code
-Jupyter Notebook
-Python IDLE

Document your findings in 3 steps:
•Task preparation and implementation:
•Task troubleshooting:
•Task verification:

1.2 Run geopy and timedate Python Scipts on the DEVASC-LABVM using the tools above (1.1):

-timedate.py
-geopy-geocoders_location.py
-location.py

Scripts can be found via Github repository: https://github.com/KathleenHombroeks/PythonExperiments

Document your findings in 3 steps:
•Task preparation and implementation:
•Task troubleshooting:
•Task verification:

1.3 Install different tools/packages on Windows OS (deep dive exercise) ++

-Python 3.8 and PIP
-Visual Studio Code
-Jupyter Notebook
-Python IDLE

Investigate the compatibility of the tools with Windows OS and explain briefly if necessary.

Document your findings in 3 steps:
•Task preparation and implementation:
•Task troubleshooting:
•Task verification:

1.4 Install different tools/packages on Ubuntu 22.04.01 LTS (deep dive exercise) ++

- Python 3.8 and PIP 
- Visual Studio Code 
- Jupyter Notebook 
- Python IDLE

Document your findings in 3 steps:
• Task preparation and implementation:
• Task troubleshooting:
• Task verification:

---------------------------------------------------------------------------------------
LAB 2 – EXPLORE REST APIs WITH API SIMULATOR AND POSTMAN
LAB NETACAD : CISCO DEVNET 4.5.5-lab---explore-rest-apis-with-api-simulator-and-postman

Part 1: Explore API Documentation Using the API Simulator
Document your findings in 3 steps:

1) Task preparation and implementation:
	Op starten van Chromium Web Browser brengt je naar een web pagina library.demo.local
	Ga verder met het klikken op here in de zin "Click here for API docs."
	Vervolgens zie je een lijst API's in /api/v1 default namespace
	Als er een slot naast de API staat betekent dit dat er een API token moet gebruikt worden(1)
	
	klik op de API GET /books 
		klik vervolgens op "Try it out" laat de parameters open en ga verder met "Execute"
		Scroll naar beneden hier krijg je meer informatie betreffende Curl,Request URL, Code, Response body, Response header
		Curl indien men de cul copiërt en plakt in een terminal krijgt men de body zoals weergegeven op de web page (2)
		Vervolgens klikken we weer op try it out an zetten we includeISBN op true eindig met execute(3)
		Dit geeft het zelfde resultaat in de body maar met het ISBM nummer 

	klik op de API POST/loginViaBasic
		Klik ook hier op Try it out en execute nu zie je een popup op je Username/ password in te geven als verificatie 
		In de parameter body zie je nu de token (4)
		Copieer het token en ga boven aan de web pagina naar "Authorize" en plak de toke je zal zien dat de sloten naast de 			API's zullen veranderen.
		
	Klik op de API POST/books
		Hier zal men boeken kunnen toevoegen dit kan men confirmeren omdat er "payload" onder parameters staat
		Voeg een boek toe (5){ "id": 4, "title": "IPv6 Fundamentals", "author": "Rick Graziani"} (JSON) en execute men kan dit 			verifiëern door de code 200 wat betekent dat het succesvol was.
		Controleer ook terug met GET/books of je boek toegevoerg is in de body (5)
	
	Klik op de API GET/books{id}
		Ga verder met "Try it out"
		Nu ziet met onde parameters Id we vragen de 4 de boek op dus id 4 en klik op execute
		Op nieuw ziet met code 200 dus deze aanvraag was succesvol zie body (6)
	
	Klik op de API DELETE/books{id}
		Ga verder met "Try it out"
		onder parameter typ 4 en execute men krijgt een code 200 (succesvol)
		men zal ik de APT GET/book nu ook zien dat dit boek verwijderd is uit de lijst (body)

2) Task troubleshooting:
3) Task verification:
	(1)Verifier of API een token nodig heeft 1 heeft een slot indien met op het slot klikt krijgt men apikey  (apiKey)
	(2)curl -X GET "http://library.demo.local/api/v1/books" -H "accept: application/json"
	(3)curl -X GET "http://library.demo.local/api/v1/books?includeISBN=true" -H "accept: application/json"
	(4){"token": "cisco|QOf6_14TmqxCHQUQFL9ouSVnMcOHFJt71mkY_N6KdQw"}
	(5) { "id": 5, "title": "31 Days Before Your CCNA Exam", "author": "Allan Johnson"}
	(6){"id": 4,"title": "IPv6 Fundamentals","author": "Rick Graziani"}

Part 2: Use Postman to Make API Calls to the API Simulator
Document your findings in 3 steps:

• Task preparation and implementation:
	Open Postman the exe is on de Desktop je hebt geen account ga verder met lightweight 
	
	Get/books API
		Default ziet men GET u kan hier op kikken en kiezen uit de verschillende mogelijkheden zoals GET,POST,DELETE
		Zie vorige oeffening GET/books hier vindt met een url http://library.demo.local/api/v1/books
			kopieer deze en ga terug naar postman.
		Paste de URL naast de GET en druk op send deze zal onderaan de body weergeven (JSON) (1) ook hier zei je code 200 (succesvol)
	
	POST/loginViaBasic API
		Open een nieuw venster door op + te klikken in postman
		Verander de GET in POST en plak volgende URL naast POST http://library.demo.local/api/v1/loginViaBasic
		onder de URL zie je Authorisation klik hier op en ga verder met Typ verander deze naar basic Auth geef volgende credentials in  Username: cisco password: Cisco123! en klik op send. 
		Nu krijgt met het token onderaan. 

	POST/books API 
		Open een nieuw venster door op + te klikken in postman
		Verander de GET in POST en plak volgende URL naast POST http://library.demo.local/api/v1/books
		onder de URL zie je Authorisation klik hier op en ga verder met Typ verander deze naar API Key en geef volgende value in X-API-KEY
		kopieer de token van vorige oeffening en plak deze in de value: cisco|rcbVkOH1ljKxZVeDF1pVyQg-mu5RCCRbxkqysKPq_tU
		Ga nu naar het tab body hier kan je het format kiezen van uw input. Klik op raw knop ga dan naar text en selecteer JSON.
		voer het volgende in. en klik op send. (2)
			{
				"id": 4,
				"title": "IPv6 Fundamentals",
				"author": "Rick Graziani",
				"isbn": "978 158144778"
			}
		Code 200 verschijnt (succesvol)
	
	Bijkomende parameters gebruiken met Get/books API
		Ga terug naar de pagina http://library.demo.local/api/v1/docs
		open GET/books API en klik op Try it out. Verander volgende parameters (includeISBN = true, sortBy = author) eindig met execute.
		(3)	
		 Ga nu naar postman naar get tab get http://library.demo.local/api/v1/books hier gaan we parameters veranderen. 
			hier ga je naar het tab Params hier kan men de keys toevoegen met met hun value includeISBN = true, sortBy = author
			nu zie je dat de URL automatish zich aanpast.klik op send nu ziet men dat de body zich aangepast heeft. 

• Task troubleshooting:
	POST loginVia Basic
		Indien er zich problemen voor doen tijdens POST loginVia Basic moet je terug authenticatie uitvoeren op de website http://library.demo.local
	POST/books API
		Indien de request niet meer zichtbaar is heb je Try it out dicht gedaan in de chrome activeer dit terug.
	
	
• Task verification:
	(1)	[{"id": 0,"title": "IP Routing Fundamentals","author": "Mark A. Sportack"},
    		{"id": 1,"title": "Python for Dummies","author": "Stef Maruch Aahz Maruch},
    		{"id": 2,"title": "Linux for Networkers","author": "Cisco Systems Inc."},
    		{"id": 3,"title": "NetAcad: 20 Years Of Online-Learning","author": "Cisco Systems Inc."}]
	(2) Verifieer met de eerste GET/books API of het toevoegen gelukt is. 
	(3) Men ziet nu in de body dat isbn toegevoegd is en dat het gesorteerd is op author. Ook is de URL veranderd naar http://library.demo.local/api/v1/books?includeISBN=true&sortBy=author


Part 3: Use Python to Add 100 Books to the API Simulator
Document your findings in 3 steps:

• Task preparation and implementation:
	Open de executable VScode op het bureaublad 
	Open de file add100RandomBooks.py
	Bovenaan ziet men dat het gaat over een python3  door de shebang #!/usr/bin/env python3
	
	Open een windows terminal en start python 3 en voer volgende commandos uit
		python3
		from faker import Faker
		fake = Faker()
		(1)
	
	Oeffenen genereren van random data met gebruik van fake library
		Deze zal random namen generen telken bij het uitvoeren
		1) print('My name is {}.'.format(fake.name()))
		2) print('My name is {} and I wrote "{}" (ISBN {}).'.format(fake.name(),fake.catch_phrase(),fake.isbn13()))
	
	Uitvoeren van het script 
		ga uit python door exit() te typen en ga naar script location 
			cd labs/devnet-src/school-library/
			Geef nu python3 add100RandomBooks.py in 
			Verifieer (2)
		Ga nu terug naar http://library.demo.local/
			hier ga je naat de GET/books API 
			en zal je de eerste 10 boeken zien 
• Task troubleshooting:

• Task verification:
	(1) fake. <Tab>
	(2) Ga nu naar http://library.demo.local/ hier ga je naat de GET/books API en zal je de eerste 10 boeken zien 








